C51 COMPILER V9.60.0.0   TIMER                                                             07/24/2025 15:32:17 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\src\timer.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5_3\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\User\
                    -Desktop\OLED\F380_OLED\8473OLED\src\timer.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIM
                    -IZE(2,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v5_3/developer/sdks/805
                    -1/v4.3.1//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5_3/developer/sdks/8051/v4.3.1//Device/C8051F380/inc
                    -) PRINT(.\src\timer.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\timer.OBJ)

line level    source

   1          #include "timer.h"
   2          
   3          /*Setting TR does not force the timer to reset.*/
   4          
   5          //-----------------------------------------------------------------------------
   6          // Constants
   7          //-----------------------------------------------------------------------------
   8          // 'volatile' is used when value may change outside, ex.ISR. Need to R/W in place for each loop.
   9          static volatile TIMER1_MODE timer1_mode;
  10          static volatile bool timer1_done = true;
  11          static volatile unsigned long count_ticks = 0;  // long for longer duration
  12          
  13          
  14          /* Oscillator Initialization is in system_init.h */
  15          
  16          //-----------------------------------------------------------------------------
  17          // Timer Initialization
  18          //-----------------------------------------------------------------------------
  19          void Timer_Init(void) {
  20   1          /*Timer 2 has auto-reload for convenience*/
  21   1          TMOD |= 0x10;  // Timer1 as 16-bit timers
  22   1          CKCON |= 0x00; // Timer1 divide by 12(1MHz)
  23   1      
  24   1          IE_ET1 = 1;    // Enable Timer1 interrupt
  25   1          //IE_EA = 1;     // Enable global interrupts (Put in main.c)
  26   1      }
  27          
  28          //-----------------------------------------------------------------------------
  29          // Set count_ticks to 16 bits Timer1 and adjust it
  30          //-----------------------------------------------------------------------------
  31          void Set_ticks_Timer1(void){
  32   1        if (count_ticks > 65535){
  33   2            TH1 = 0x00;   // High byte
  34   2            TL1 = 0x00;   // Low byte
  35   2            count_ticks -= 65536UL;
  36   2        }
  37   1        else{
  38   2            TH1 = (65536UL - count_ticks) >> 8;   // High byte
  39   2            TL1 = (65536UL - count_ticks) & 0xFF; // Low byte
  40   2            count_ticks -= count_ticks;
  41   2        }
  42   1      }
  43          
  44          //-----------------------------------------------------------------------------
  45          // Checks if Timer1 counting is completed.
  46          //-----------------------------------------------------------------------------
  47          bool Timer1_IsDone(void) {
  48   1          return timer1_done;
  49   1      }
  50          
  51          //-----------------------------------------------------------------------------
  52          // Wait() with microsecond resolution (Max:65ms)
C51 COMPILER V9.60.0.0   TIMER                                                             07/24/2025 15:32:17 PAGE 2   

  53          //-----------------------------------------------------------------------------
  54          void Wait_us_Timer1(unsigned int us) {
  55   1          unsigned int value;
  56   1      
  57   1          timer1_mode = TIMER1_WAIT;
  58   1          timer1_done = false;    // reset
  59   1      
  60   1          value = 65536UL - us;  // 1MHz as timer clock
  61   1          TH1 = value >> 8;    // High byte
  62   1          TL1 = value & 0xFF;  // Low byte
  63   1      
  64   1          TCON_TR1 = 1;  // Start Timer1
  65   1      
  66   1          while(!timer1_done);  // Wait until done
  67   1      }
  68          
  69          //-----------------------------------------------------------------------------
  70          // non-blocked Count-down function
  71          //-----------------------------------------------------------------------------
  72          void Count_Timer1(unsigned int ms){
  73   1          timer1_mode = TIMER1_COUNT;
  74   1          timer1_done = false;    // reset
  75   1      
  76   1          // (unsigned long)/UL is critical since ms is int!
  77   1          count_ticks = 1000UL * ms;  // set 1MHz as timer clock
  78   1      
  79   1          Set_ticks_Timer1();
  80   1      
  81   1          TCON_TR1 = 1;  // Start Timer1
  82   1      }
  83          
  84          //-----------------------------------------------------------------------------
  85          // ISR is unique so can't be in .h
  86          //-----------------------------------------------------------------------------
  87          SI_INTERRUPT(Timer1_ISR, 3) {
  88   1          switch (timer1_mode){
  89   2      
  90   2             case TIMER1_WAIT:
  91   2                TCON_TR1 = 0;   // Stop Timer1
  92   2                timer1_done = true;
  93   2                break;
  94   2      
  95   2             case TIMER1_COUNT:
  96   2                if (count_ticks != 0) {
  97   3                    Set_ticks_Timer1() ;
  98   3                }
  99   2                if (count_ticks == 0) {
 100   3                    TCON_TR1 = 0;   // Stop Timer1
 101   3                    timer1_done = true;
 102   3                }
 103   2                break;
 104   2          }
 105   1      
 106   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    358    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       6
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   TIMER                                                             07/24/2025 15:32:17 PAGE 3   

   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
