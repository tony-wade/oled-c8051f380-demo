C51 COMPILER V9.60.0.0   SPI_OLED_8473                                                     07/24/2025 18:30:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SPI_OLED_8473
OBJECT MODULE PLACED IN .\src\spi_oled_8473.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5_3\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\User\
                    -Desktop\OLED\F380_OLED\8473OLED\src\spi_oled_8473.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(
                    -3) OPTIMIZE(2,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v5_3/developer/
                    -sdks/8051/v4.3.1//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5_3/developer/sdks/8051/v4.3.1//Device/C8051
                    -F380/inc) PRINT(.\src\spi_oled_8473.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\spi_oled_8473.OBJ)

line level    source

   1          #include "spi_oled_8473.h"
   2          
   3          /*
   4           * Only Control_OLED(), OLED_RW() need to adjust when migrate to other MCU.
   5           * Now: C8051F380
   6           */
   7          
   8          //-----------------------------------------------------------------------------
   9          // F380 General OLED Control Func.
  10          //-----------------------------------------------------------------------------
  11          void Control_OLED(uint8_t cmd, const uint8_t* param, uint8_t param_len) {
  12   1          uint8_t i;    // old compiler
  13   1      
  14   1          // Since only sending for now, no need to open SPI interrupt
  15   1          //IE_ESPI0 = 0;   // disable SPI interrupt(if enable)
  16   1          SPI0CN_NSSMD0 = 0;  // Set chip select (XCS = NSS = Low)
  17   1      
  18   1          if (param == NULL){
  19   2              // Send 0x08 to wake OLED(same pic)
  20   2              A0 = 0;
  21   2              SPI0DAT = cmd;
  22   2              while (!SPI0CN_SPIF);   // Wait until finish
  23   2              SPI0CN_SPIF = 0;    // Clear SPI transfer complete flag
  24   2              A0 = 1;             // End command phase
  25   2          }
  26   1      
  27   1          else {
  28   2              // Send command byte (CMD)
  29   2              A0 = 0;
  30   2              SPI0DAT = cmd;
  31   2              while (!SPI0CN_SPIF);
  32   2              SPI0CN_SPIF = 0;    // Clear SPI transfer complete flag
  33   2              A0 = 1;             // End command phase
  34   2      
  35   2              // Send command parameter
  36   2              for (i = 0; i < param_len; i++) {
  37   3                  SPI0DAT = param[i];
  38   3                  while (!SPI0CN_SPIF);
  39   3                  SPI0CN_SPIF = 0;  // Clear flag
  40   3              }
  41   2          }
  42   1      
  43   1          SPI0CN_NSSMD0 = 1;  // Release chip select (XCS = NSS = High)
  44   1          //IE_ESPI0 = 1;   // re-enable SPI interrupt
  45   1      }
  46          
  47          //-----------------------------------------------------------------------------
  48          // F380 Update OLED frame buffer (for Wake up, please use Control_OLED())
  49          //-----------------------------------------------------------------------------
  50          void OLED_RW(const uint8_t* frame_list, uint16_t frame_list_len) {    // need to adjust with frame size
  51   1          uint16_t i;   // need to adjust with frame size
  52   1      
C51 COMPILER V9.60.0.0   SPI_OLED_8473                                                     07/24/2025 18:30:03 PAGE 2   

  53   1          // Since only sending for now, no need to open SPI interrupt
  54   1          //IE_ESPI0 = 0;   // disable SPI interrupt(if enable)
  55   1          SPI0CN_NSSMD0 = 0;  // XCS = NSS = Low
  56   1      
  57   1          // Send command byte (CMD)
  58   1          A0 = 0;                 // Set command phase
  59   1          SPI0DAT = 0x08;
  60   1          while (!SPI0CN_SPIF);
  61   1          SPI0CN_SPIF = 0;        // Clear SPI transfer complete flag
  62   1          A0 = 1;                 // End command phase
  63   1      
  64   1          // Send Frame Data
  65   1          for (i = 0; i < frame_list_len; i++) {
  66   2              SPI0DAT = frame_list[i];
  67   2              while (!SPI0CN_SPIF);
  68   2              SPI0CN_SPIF = 0;  // Clear flag
  69   2          }
  70   1      
  71   1          SPI0CN_NSSMD0 = 1;  // XCS = NSS = High
  72   1          //IE_ESPI0 = 1;   // re-enable SPI interrupt
  73   1      }
  74          
  75          
  76          //-----------------------------------------------------------------------------
  77          // Turn ON & Initialize OLED 8473
  78          //-----------------------------------------------------------------------------
  79          void Power_ON(void)
  80          {
  81   1          // C90 is so old....
  82   1          static const uint8_t param_02[] = {0x00};
  83   1          static const uint8_t param_09[] = {0x00};
  84   1          static const uint8_t param_10[] = {0x06, 0x00, 0x00};
  85   1          static const uint8_t param_12[] = {0x42, 0x00, 0x00};  //3.3v
  86   1          static const uint8_t param_13[] = {0x00};
  87   1          static const uint8_t param_14[] = {0x01};
  88   1          static const uint8_t param_16[] = {0x00};
  89   1          static const uint8_t param_17[] = {0x00};
  90   1          static const uint8_t param_18[] = {0x07};
  91   1          static const uint8_t param_1A[] = {0x02};
  92   1          static const uint8_t param_1C[] = {0x00};
  93   1          static const uint8_t param_1D[] = {0x00};
  94   1          static const uint8_t param_30[] = {0x00, 0x10, 0x01, 0x0F};
  95   1          static const uint8_t param_32[] = {0x00, 0x2F};
  96   1          static const uint8_t param_34[] = {0x01};
  97   1          static const uint8_t param_35[] = {0x10};
  98   1          static const uint8_t param_36[] = {0x00};
  99   1          static const uint8_t param_37[] = {0x2F};
 100   1          static const uint8_t param_38[] = {0x00, 0x00};
 101   1          static const uint8_t param_39[] = {0x00};
 102   1          static const uint8_t param_48[] = {0x03};
 103   1          static const uint8_t param_D0[] = {0x80};
 104   1          static const uint8_t param_D2[] = {0x00};
 105   1          static const uint8_t param_D9[] = {0x00};
 106   1          static const uint8_t param_DB[] = {0x0F};
 107   1          static const uint8_t param_DD[] = {0x88};
 108   1          static const uint8_t param_E0[] = {0x10};
 109   1          static const uint8_t param_E2[] = {0x01};
 110   1          static const uint8_t param_E3[] = {0x00};
 111   1          static const uint8_t param_E4[] = {0x3F, 0x3F};
 112   1          static const uint8_t param_E5[] = {0x07};
 113   1          static const uint8_t param_E6[] = {0x07};
 114   1          static const uint8_t param_E7[] = {0x07};
 115   1          static const uint8_t param_FD[] = {0x10};  // 3.3v
C51 COMPILER V9.60.0.0   SPI_OLED_8473                                                     07/24/2025 18:30:03 PAGE 3   

 116   1          static const uint8_t param_F0[] = {0x00};  // TEST
 117   1      
 118   1          // VDD, XCS need to provide at the same time(<100ms)
 119   1          // VAH ON
 120   1          XRES = 1;
 121   1          Wait_us_Timer1(1);  // > 100ns
 122   1      
 123   1          // Please refer to data sheet(>1.1ms before OLED write)
 124   1          Control_OLED(0x01, NULL, 0);    // reset to default
 125   1          //Wait_us_Timer1(1);  // > 200ns
 126   1          Control_OLED(0x02, param_02, sizeof(param_02));
 127   1          Control_OLED(0x09, param_09, sizeof(param_09));
 128   1          Control_OLED(0x10, param_10, sizeof(param_10));
 129   1          Control_OLED(0x12, param_12, sizeof(param_12));
 130   1          Control_OLED(0x13, param_13, sizeof(param_13));
 131   1          Control_OLED(0x14, param_14, sizeof(param_14));
 132   1          Control_OLED(0x16, param_16, sizeof(param_16));
 133   1          Control_OLED(0x17, param_17, sizeof(param_17));
 134   1          Control_OLED(0x18, param_18, sizeof(param_18));
 135   1          Control_OLED(0x1A, param_1A, sizeof(param_1A));
 136   1          Control_OLED(0x1C, param_1C, sizeof(param_1C));
 137   1          Control_OLED(0x1D, param_1D, sizeof(param_1D));
 138   1          Control_OLED(0x30, param_30, sizeof(param_30));
 139   1          Control_OLED(0x32, param_32, sizeof(param_32));
 140   1          Control_OLED(0x34, param_34, sizeof(param_34));
 141   1          Control_OLED(0x35, param_35, sizeof(param_35));
 142   1          Control_OLED(0x36, param_36, sizeof(param_36));
 143   1          Control_OLED(0x37, param_37, sizeof(param_37));
 144   1          Control_OLED(0x38, param_38, sizeof(param_38));
 145   1          Control_OLED(0x39, param_39, sizeof(param_39));
 146   1          Control_OLED(0x48, param_48, sizeof(param_48));
 147   1          Control_OLED(0xD0, param_D0, sizeof(param_D0));
 148   1          Control_OLED(0xD2, param_D2, sizeof(param_D2));
 149   1          Control_OLED(0xD9, param_D9, sizeof(param_D9));
 150   1          Control_OLED(0xDB, param_DB, sizeof(param_DB));
 151   1          Control_OLED(0xDD, param_DD, sizeof(param_DD));
 152   1          Control_OLED(0xE0, param_E0, sizeof(param_E0));
 153   1          Control_OLED(0xE2, param_E2, sizeof(param_E2));
 154   1          Control_OLED(0xE3, param_E3, sizeof(param_E3));
 155   1          Control_OLED(0xE4, param_E4, sizeof(param_E4));
 156   1          Control_OLED(0xE5, param_E5, sizeof(param_E5));
 157   1          Control_OLED(0xE6, param_E6, sizeof(param_E6));
 158   1          Control_OLED(0xE7, param_E7, sizeof(param_E7));
 159   1          Control_OLED(0xFD, param_FD, sizeof(param_FD));
 160   1      
 161   1          // TEST
 162   1          Control_OLED(0x20,  NULL, 0);
 163   1          Control_OLED(0xFD, param_F0, sizeof(param_F0));
 164   1      
 165   1          // follow by OLED write
 166   1      }
 167          
 168          //-----------------------------------------------------------------------------
 169          // Turn OFF OLED
 170          //-----------------------------------------------------------------------------
 171          void Power_OFF(void)
 172          {
 173   1          SPI0CN_NSSMD0 = 1;  // XCS = NSS = H
 174   1          XRES = 0;
 175   1          Wait_us_Timer1(1);
 176   1          //VAH OFF
 177   1          //SCK (SCL / D6), MOSI (SI / D7) H, else L.
 178   1      }
C51 COMPILER V9.60.0.0   SPI_OLED_8473                                                     07/24/2025 18:30:03 PAGE 4   

 179          
 180          //-----------------------------------------------------------------------------
 181          // Stand-by Mode ON/OFF
 182          //-----------------------------------------------------------------------------
 183          void Set_Standby(bool enable)
 184          {
 185   1          uint8_t input[1];
 186   1          input[0] = enable ? 0x01 : 0x00;   // Standby OFF when false(0x00)
 187   1          Control_OLED(0x14, input, sizeof(input));
 188   1      }
 189          
 190          //-----------------------------------------------------------------------------
 191          // Power Save Mode ON/OFF (VAH ON/OFF, after Stand-by Mode ON only)
 192          //-----------------------------------------------------------------------------
 193          // can realize through GPIO
 194          
 195          //-----------------------------------------------------------------------------
 196          //  OLED Frame ON/OFF
 197          //-----------------------------------------------------------------------------
 198          void Set_Display(bool enable)
 199          {
 200   1          uint8_t input[1];
 201   1          input[0] =  enable ? 0x01 : 0x00;   // Display ON when true(0x01)
 202   1          Control_OLED(0x02,  input, sizeof(input));
 203   1      }
 204          
 205          //-----------------------------------------------------------------------------
 206          // OLED brightness update & brightness schedule
 207          //-----------------------------------------------------------------------------
 208          void Set_Brightness(uint8_t level)
 209          {
 210   1          uint8_t input[1];   // must be on the top as old C....
 211   1      
 212   1          level = level % 0x10;  // max value is 0x0F
 213   1      
 214   1          input[0] = level;
 215   1          Control_OLED(0xDB, input, 1);
 216   1      }
 217          
 218          // local brightness list
 219          const uint8_t code schedule[] ={0x0E, 0x0A, 0x08, 0x06, 0x04, 0x03, 0x02};
 220          
 221          void Update_Brightness(void)
 222          {
 223   1          static uint8_t idx = 0;
 224   1          Set_Brightness(schedule[idx]);
 225   1      
 226   1          idx++;
 227   1          if (idx >= sizeof(schedule)) {
 228   2              idx = 0;
 229   2          }
 230   1      }
 231          //-----------------------------------------------------------------------------
 232          //-----------------------------------------------------------------------------
 233          // Can't use when in Stand-by with VAH
 234          void Rotate180(uint8_t enable, const uint8_t* frame_list, uint8_t frame_list_len)
 235          {
 236   1          uint8_t input[1];
 237   1          input[0] = (enable ? 0x0B : 0x00);    // Rotate 180  when enable == 1(0x0B)
 238   1          Control_OLED(0x1D, input, sizeof(input));
 239   1      
 240   1          OLED_RW(frame_list, frame_list_len);
 241   1      }
C51 COMPILER V9.60.0.0   SPI_OLED_8473                                                     07/24/2025 18:30:03 PAGE 5   

 242          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    890    ----
   CONSTANT SIZE    =      7    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     46      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
