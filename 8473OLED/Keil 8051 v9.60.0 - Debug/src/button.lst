C51 COMPILER V9.60.0.0   BUTTON                                                            07/24/2025 15:32:16 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BUTTON
OBJECT MODULE PLACED IN .\src\button.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5_3\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\User\
                    -Desktop\OLED\F380_OLED\8473OLED\src\button.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTI
                    -MIZE(2,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v5_3/developer/sdks/80
                    -51/v4.3.1//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5_3/developer/sdks/8051/v4.3.1//Device/C8051F380/in
                    -c) PRINT(.\src\button.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\button.OBJ)

line level    source

   1          #include "button.h"
   2          
   3          /*
   4           *  Higher the system clock, the more sensitive code is.
   5           *  Be aware with any multi-requirement in if statement & any ISR scenario.
   6           */
   7          
   8          //-----------------------------------------------------------------------------
   9          // Constants
  10          //-----------------------------------------------------------------------------
  11          static ButtonState button_state = BUTTON_IDLE;
  12          static uint16_t short_press_counter = 0;
  13          static uint16_t long_press_counter = 0;
  14          static bool prev_input = false;   // not triggered
  15          static bool timeoutPending = false;
  16          
  17          const uint16_t DEBOUNCE_TIME = 10;          // ms
  18          const uint16_t ACTION_COMPLETE_TIME = 300;  // ms
  19          const uint16_t LONG_PRESS_TIME = 1000;      // ms
  20          
  21          //-----------------------------------------------------------------------------
  22          // Button Event Logic
  23          //-----------------------------------------------------------------------------
  24          void Button_Update(void)
  25          {
  26   1          volatile bool now_input = Read_Button();
  27   1      
  28   1          switch (button_state) {
  29   2      
  30   2            case BUTTON_IDLE:
  31   2                // triggered only when not pressed to pressed.
  32   2                if (!prev_input && now_input) {
  33   3                    button_state = BUTTON_DEBOUNCE;
  34   3                    Count_Timer1(DEBOUNCE_TIME);
  35   3                }
  36   2                break;
  37   2      
  38   2            case BUTTON_DEBOUNCE:
  39   2                if (Timer1_IsDone()) {
  40   3                    if (now_input) {
  41   4                        button_state = BUTTON_PRESSED;
  42   4                        Count_Timer1(LONG_PRESS_TIME - DEBOUNCE_TIME);
  43   4                    }
  44   3                    else {
  45   4                        button_state = BUTTON_RELEASED;   // invalid input
  46   4                    }
  47   3                }
  48   2                break;
  49   2      
  50   2            case BUTTON_PRESSED:
  51   2                if (!now_input) {
  52   3      
C51 COMPILER V9.60.0.0   BUTTON                                                            07/24/2025 15:32:16 PAGE 2   

  53   3                    if (Timer1_IsDone()){
  54   4                        long_press_counter += 1;
  55   4                    }
  56   3                    else {
  57   4                        short_press_counter += 1;
  58   4                    }
  59   3                    button_state = BUTTON_RELEASED;
  60   3                    Count_Timer1(DEBOUNCE_TIME);
  61   3                }
  62   2                break;
  63   2      
  64   2            case BUTTON_RELEASED:
  65   2                if (Timer1_IsDone()){
  66   3      
  67   3                    if (!timeoutPending) {
  68   4                        Count_Timer1(ACTION_COMPLETE_TIME);   //  detect further action
  69   4                        timeoutPending = true;
  70   4                    }
  71   3      
  72   3                    else {
  73   4                        //Events
  74   4                        if (short_press_counter == 1){
  75   5                            OneClickEvent();
  76   5                        }
  77   4                        else if (short_press_counter == 2){
  78   5                            DoubleClickEvent();
  79   5                        }
  80   4                        else if (long_press_counter == 1){
  81   5                            LongPressEvent();
  82   5                        }
  83   4                        // Can realize Multi-click here
  84   4      
  85   4                        // back to idle
  86   4                        button_state = BUTTON_IDLE;
  87   4                        short_press_counter = 0;   // reset
  88   4                        long_press_counter = 0;    // reset
  89   4                        timeoutPending = false;
  90   4                    }
  91   3                 }
  92   2      
  93   2                else if (now_input && timeoutPending) {
  94   3                    button_state = BUTTON_DEBOUNCE;
  95   3                    Count_Timer1(DEBOUNCE_TIME);
  96   3                    timeoutPending = false;
  97   3                }
  98   2                break;
  99   2          }
 100   1      
 101   1          prev_input = now_input;  // update
 102   1      }
 103          
 104          //-----------------------------------------------------------------------------
 105          // Button Event  Constants (Can migrate to new file)
 106          //-----------------------------------------------------------------------------
 107          static bool OLED_ON = false;
 108          static bool Disply_ON = false;
 109          
 110          
 111          //-----------------------------------------------------------------------------
 112          // One-Click: OLED Brightness Control
 113          //-----------------------------------------------------------------------------
 114          void OneClickEvent(void) {
 115   1      
C51 COMPILER V9.60.0.0   BUTTON                                                            07/24/2025 15:32:16 PAGE 3   

 116   1          if (Disply_ON && OLED_ON) {
 117   2              Update_Brightness();
 118   2          }
 119   1      }
 120          
 121          //-----------------------------------------------------------------------------
 122          // Double-Click:: OLED Display Control
 123          //-----------------------------------------------------------------------------
 124          void DoubleClickEvent(void) {
 125   1      
 126   1          if (OLED_ON) {
 127   2      
 128   2              if (!Disply_ON) {
 129   3                  Set_Standby(false);
 130   3                  Control_OLED(0x08, NULL, 0);  // Wake
 131   3                  Set_Display(true);
 132   3      
 133   3                  Disply_ON = true;
 134   3              }
 135   2              else {
 136   3                  Set_Display(false);
 137   3                  Wait_us_Timer1(10000);  // 10 ms
 138   3                  Set_Standby(true);
 139   3      
 140   3                  Disply_ON = false;
 141   3              }
 142   2          }
 143   1      }
 144          
 145          //-----------------------------------------------------------------------------
 146          // Long Press: OLED On-Off
 147          //-----------------------------------------------------------------------------
 148          void LongPressEvent(void) {
 149   1      
 150   1          if (!OLED_ON) {
 151   2              // VAH H
 152   2              Power_ON();
 153   2              Set_Standby(false);   // not in data sheet!!
 154   2              OLED_RW(TEST_IMAGE_1, sizeof(TEST_IMAGE_1));
 155   2              Set_Display(true);   // not in data sheet!!
 156   2      
 157   2              OLED_ON = true;
 158   2              Disply_ON = true;
 159   2          }
 160   1          else {
 161   2              if (Disply_ON){
 162   3                  DoubleClickEvent();  // need display off, back to stand by
 163   3              }
 164   2              Power_OFF();
 165   2      
 166   2              OLED_ON = false;
 167   2              Disply_ON = false;
 168   2          }
 169   1      }
 170          
 171          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    338    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   BUTTON                                                            07/24/2025 15:32:16 PAGE 4   

   DATA SIZE        =     11    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
